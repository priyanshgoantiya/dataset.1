# -*- coding: utf-8 -*-
"""PANDAS CASE STUDY ON TIMESERIES ANALYSIS

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TqlidFGt1qBumMNYDwiM2cnj7p9DaDN8
"""

import pandas as pd
import numpy as np

pd.Timestamp('6th jan 2024 8:24PM').month

pd.DatetimeIndex([pd.Timestamp('6th jan 2024 8:24PM'),pd.Timestamp('7th jan 2024 8:24PM'),pd.Timestamp('8th jan 2024 8:24PM')])[2]

pd.date_range(start='2023-1-1',periods=365,freq='D')

s=pd.Series(['2023/01/01', '2023/11/02', '2023/12/03'])
pd.to_datetime(s).dt.month_name()

"""## `Timedelta Object`

`Represents a duration, the difference between two dates or times.`
"""

# create using Timestamp objects
t1=pd.Timestamp('6th jan 2024 8:24:56AM')
t2=pd.Timestamp('6th jan 2025 8:37:45PM')
t2-t1

# standalone creation
pd.Timedelta(days=2,hours=12,minutes=23,seconds=56)

## Arithmetic
pd.Timestamp('6th jan 2024 8:24:56AM') + pd.Timedelta(days=2,hours=12,minutes=23,seconds=56)

pd.date_range(start='2023-1-1',periods=31,freq='D')+pd.Timedelta(days=2,hours=12,minutes=23,seconds=56)

# real life example
df=pd.read_csv('/content/deliveries.csv')
df.head()

df['order_date']=pd.to_datetime(df['order_date'])
df['delivery_date']=pd.to_datetime(df['delivery_date'])

df.info()

(df['delivery_date']-df['order_date']).mean()

"""#Time series
A time series is a data set that tracks a sample over time. In particular, a time series allows one to see what factors influence certain variables from period to period. Time series analysis can be useful to see how a given asset, security, or economic variable changes over time.

Examples

 > Financial Data (Company stocks)

 > Natural Data (Rainfall measurement)

 > Event Data (Covid)

 > Medical Data (Heart rate monitoring)

Types of Operations done on Time Series

 > Time Series Analysis

 > Time Series Forecasting
"""

google=pd.read_csv('/content/google.csv')
google.head()

google['Date']=pd.to_datetime(google['Date'])

google.info()

google.set_index('Date',inplace=True)

google.loc['2021-12-31']

google.loc['2021-12']

google.loc['2021']

google['Month']=google.index.month_name()

google['Day']=google.index.day_name()

google['Quarter']=google.index.quarter

google.head()

google.loc['2020-02-02':'2020-06-02']

pd.date_range(start='2005-1-6',end='2022-1-6',freq=pd.DateOffset(years=1))

google[google.index.isin(pd.date_range(start='2005-1-6',end='2022-1-6',freq=pd.DateOffset(years=1)))]

google['Close'].plot()

google.columns

x=google[['Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume']]
ax=x.plot(subplots=True,layout=(3,2),figsize=(20,15),sharex=False,
                     sharey=False,
                     linewidth=0.7,
                     fontsize=10,
                     legend=False,title=['Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume'])

google.loc['2020-01-06':'2022-01-06']['High'].plot()

google.loc['2020-04']['Close'].plot()

google=google.asfreq('B')

google.index

google.asfreq('Q')['Close'].plot()

google.groupby('Month')['Close'].mean().plot(kind='bar')

google.groupby('Quarter')['Close'].mean().plot(kind='bar')

"""# Resampling

Resampling involves changing the frequency of your time series observations.

`Two types of resampling are:`

Upsampling: Where you increase the frequency of the samples, such as from minutes to seconds.

Downsampling: Where you decrease the frequency of the samples, such as from days to months.

# Downsampling
"""

google['Close'].plot()
google['Close'].resample("Q").mean().plot()

"""# Upsampling"""

google['Close'].plot()
google['Close'].resample("H").interpolate(method='spline',order=2).plot()

"""#Rolling Window(Smoothing)

Time series data in original format can be quite volatile, especially on smaller aggregation levels. The concept of rolling, or moving averages is a useful technique for smoothing time series data.
"""

google['Close'].plot()
google['Close'].rolling(60).mean().plot()

google['Close'].plot()
google['Close'].ewm(60).mean().plot()

import matplotlib.pyplot as plt

# Plotting the 30-day rolling mean
google['Close'].rolling(30).mean().plot(label='30-Day Rolling Mean')

# Plotting the 30-day exponentially weighted mean
google['Close'].ewm(30).mean().plot(label='30-Day EWM')

# Adding a legend
plt.legend()

# Displaying the plot
plt.show()

"""# Shifting

The shift() function is Pandas is used to, well, shift the entire series up or down by the desired number of periods.
"""

google['Close'].shift(-1)

login=pd.read_csv('/content/login.csv',header=None,names=['ID','User_id','login_time','kyapata'])

df=login[['User_id','login_time']]
df.shape

df['login_time']=pd.to_datetime(df['login_time'])

df.info()

user=df[df['User_id']==413]
user

user['shifted']=user['login_time'].shift(1)

(user['login_time']-user['shifted']).mean()

