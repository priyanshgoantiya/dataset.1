# -*- coding: utf-8 -*-
"""task-21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13oB3uvD1vpETCO7ZH8jjbyeA_Fb0NzvN
"""

import pandas as pd

"""###`Q-1:` You are given a Multi index DataFrame. You task is to swap level-0 index with level-0 column.
* Change Branch -> ('cse', 'ece') as columns at level-0 and ('delhi'	'mumbai') as level-0 Index
* And Sort on row index level-0
"""

# Given Code Snippets
index_val = [('cse',2019),('cse',2020),('cse',2021),('cse',2022),('ece',2019),('ece',2020),('ece',2021),('ece',2022)]
multiindex = pd.MultiIndex.from_tuples(index_val)
df = pd.DataFrame(
    [
        [1,2,0,0],
        [3,4,0,0],
        [5,6,0,0],
        [7,8,0,0],
        [9,10,0,0],
        [11,12,0,0],
        [13,14,0,0],
        [15,16,0,0],
    ],
    index = multiindex,
    columns = pd.MultiIndex.from_product([['delhi','mumbai'],['avg_package','students']])
)

df

# code here
df.unstack().sort_index(level=0,ascending=False)

"""###`Q-2:` Covid Cases Data Set Problem
 Make a DataFrame Using both Covid Dataset. With Country name as Level-0 and Provinance/State as Level-1 Index and date, No of cases and No of Deaths as Columns.
"""

confirm = pd.read_csv('/content/time_series_covid19_confirmed_global.csv')
deaths = pd.read_csv("/content/time_series_covid19_deaths_global.csv")

confirm=confirm.melt(id_vars=['Province/State','Country/Region','Lat','Long'],var_name='Date',value_name='cases')
deaths=deaths.melt(id_vars=['Province/State','Country/Region','Lat','Long'],var_name='Date',value_name='death_count')

confirm

merge_df=confirm.merge(deaths,on=['Province/State','Country/Region','Lat','Long','Date'])
merge_df

merge_df.set_index(['Country/Region','Province/State'],inplace=True)

merge_df[['Date','cases','death_count']]

"""###`Q-3:` Show Country with Heighest death percent out of confirmed Cases."""

# code here
merge_df1=merge_df[(merge_df['cases'])>(merge_df['death_count'])]
merge_df1['Death_percentage']=(merge_df1['death_count']/merge_df1['cases'])*100

merge_df1.sort_values('Death_percentage',ascending=False)

"""### `Q-4` : Make a dataframe for India from Covid Data with one extra column representing no of new cases.

* Just for Assumption "No of new cases" will be equal to difference of "no of cases" with previous day.
* First day new cases will be NaN or equal to no of cases

Say on 12/30/22 No of cases is - 44679608	and a day previous (12/29/22) no of cases is - 44679382.

Then for 12/30/22 -> No of New Cases  = 44679608 - 44679382 =

Note:- Try using shift Function

Try using the shift function

```
s = pd.Series([1,2,3,4,5,6])
s #-> [1,2,3,4,5,6]
s.shift(1) #-> [NaN, 1,2,3,4,5]
s.shift(-1) #-> [2,3,4,5,6, NaN]
```
"""

# code here
merge_df['new_cases']=merge_df['cases']-merge_df['cases'].shift(1)
merge_df.head(10)

"""### `Q-5:` Read the Dataset using the below given link and create a multi-index dataframe using the columns "Country" and "City/Town".

This dataset is about the most polluted cities in the world. You can get details from [here](https://www.kaggle.com/datasets/rajkumarpandey02/worlds-most-air-polluted-countries-cities).

**Dataset link:** https://tinyurl.com/2fe6vz4u Directly use this link to read.

**Task:**
1. Find out the name of the city of India which is most poluted based on PM10.
2. Find out the name of the city of India which has minumum pollution level based on PM10.
3. Do same operations (like 1 and 2) with the country China.
4. Make a pie chart based on the column "PM10" of the country Poland.
5. Make a bar chart based on the columns "PM2.5" and "PM10" of the countries Israel and Qatar.
6. Convert this MultiIndex DataFrame to Series by retaining the informations.
"""

# code here
df=pd.read_csv('/content/List of most-polluted cities by particulate matter concentration - List of most-polluted cities by particulate matter concentration (1).csv')

df.head()

df.set_index(['Country','City/Town'],inplace=True)

df

df.loc['India'].sort_values('PM10',ascending=False)

df.loc['India'].sort_values('PM10',ascending=True)

df.loc['China'].sort_values('PM10',ascending=False)

df.loc['China'].sort_values('PM10',ascending=True)

df1=df.loc['Poland'].sort_values(by='PM10',ascending=False)
df1

df1['PM10'].plot(kind='pie',labels=df1.index, autopct='%1.1f%%', startangle=140)

df.info()

df2=df.loc[['Israel','Qatar']]
df2.sort_values(by='PM10',ascending=False)
df2

df2['PM10'].plot(kind='bar')

df2['PM2.5'].plot(kind='bar')

df.stack()

